package model;

import java.awt.Color;
import java.awt.Graphics;
import java.util.ArrayList;
import java.util.Random;

import model.Particle.Mode;


public class ParticleSystem {
	
	private ArrayList<Particle> particles;
	private Particle p;
	private int number = 50;
	private MyVector direction;
	private Random rAngle;
	private Mode mode;
	public double x;
	public double y;
	public boolean restartOnce;
	
	public ParticleSystem(int x, int y, int width, int height, Color c, Mode mode){
		particles = new ArrayList<Particle>();
		rAngle = new Random();
		this.mode = mode;
		this.x = x;
		this.y = y;
		double rad;
		for(int i = 0; i < number; i++){
			rad = randomAngle() * (Math.PI/180);
			direction = new MyVector(Math.cos(rad), -Math.sin(rad));
			particles.add(new Particle(x, y, width, height, direction, randomForce(), c, mode));
		}
		restartOnce = false;
	}
	
	public void update(){
		for(int i = 0; i < number; i++){
			if(mode.equals(Mode.RADIAL)){
			double px = particles.get(i).position.x;
			double py = particles.get(i).position.y;
			double d = Math.sqrt((x - px) * (x - px) + (y - py) * (y - py));
			if(d > 100)
				particles.get(i).restart((int)x, (int)y);
			}
			    particles.get(i).update();
		}
		
	}
	
	public void restart(int x, int y){
		if(!restartOnce){
		for(int i = 0; i < number; i++){
			particles.get(i).restart(x, y);
		}
		restartOnce = true;
	 }
	}
	
	public double randomAngle(){
		double angle = rAngle.nextDouble() * 360;
		return angle;
	}
	
	public int randomForce(){
		int f = (int)(rAngle.nextDouble() * 10) + 5;
		return f;
	}
	
	public void draw(Graphics graphics){
		for(int i = 0; i < number; i++){
			particles.get(i).draw(graphics);
		}
	}
	

}
